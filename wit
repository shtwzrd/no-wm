#!/bin/bash
# wit - windows in tags
#
# derived from z3bra's groaw script

WROOT=~/tmp/wig.d
ACTIVE=~/tmp/wig.d/ACTIVE
GNUMBER=4

GCLR1="ff$(xrdb -query | grep -e "\*color9:" | sed -n 's/[^#]*\#//p')"
GCLR2="ff$(xrdb -query | grep -e "\*color10:" | sed -n 's/[^#]*\#//p')"
GCLR3="ff$(xrdb -query | grep -e "\*color11:" | sed -n 's/[^#]*\#//p')"
GCLR4="ff$(xrdb -query | grep -e "\*color12:" | sed -n 's/[^#]*\#//p')"

color_of_group() {
    case $1 in
        1) eval "$2='$GCLR1'" ;;
        2) eval "$2='$GCLR2'" ;;
        3) eval "$2='$GCLR3'" ;;
        4) eval "$2='$GCLR4'" ;;
    esac
}

last_active() {
    LAST_ACTIVE=$(ls -t $ACTIVE | head -c 1)
    test $LAST_ACTIVE || LAST_ACTIVE=1
}

usage() {
    echo "$(basename $0) [-h] [-admgtTupb <gid>]"
}

add_to_group() {
    if [ $2 = "last_active" ]; then
        test -e $WROOT/$LAST_ACTIVE \
            || mkdir $WROOT/$LAST_ACTIVE
        :> $WROOT/$LAST_ACTIVE/$1
    else
        touch $ACTIVE/$2
        :> $WROOT/$2/$1
        test -d $ACTIVE/$2 || mapw -u $1
    fi
}

remove_from_group() {
    test "$2" = "all" \
        && rm -f $WROOT/*/$1 \
            || rm -f $WROOT/$2/$1
}

toggle_window_membership() {
    if [ $2 = "all" ]; then
        add_to_group $1 1; add_to_group $1 2
        add_to_group $1 2; add_to_group $1 4
    elif [ $2 = "none" ]; then
        remove_from_group $1 1; remove_from_group $1 2
        remove_from_group $1 3; remove_from_group $1 4
    else
        test -e $WROOT/$2/$1 \
            && remove_from_group $1 $2 \
                || add_to_group $1 $2
    fi
}

find_group() {
    file=$(find $WROOT -name "$1")
    test -n "$file" && basename $(dirname $file)
}

show_group() {
    test -d $ACTIVE/$1 \
        && touch $ACTIVE/$1 \
            || mkdir $ACTIVE/$1
    for file in $WROOT/$1/*; do
        wid=$(basename $file)
        mapw -m $wid
    done
}

exists_in_other_active() {
    for dir in $ACTIVE/*; do
        case "$(basename $dir)" in
            "$2") ;;
            * ) test -e $WROOT/$(basename $dir)/$1 && echo exists;;
        esac
    done
    return 1
}

hide_group() {
    test -e $ACTIVE/$1 && rm -r $ACTIVE/$1

    for file in $WROOT/$1/*; do
        wid=$(basename $file)
        if [ ! $(exists_in_other_active $wid $1) ]; then
            mapw -u $wid
        fi
    done
}

togg_group() {
    if [ $1 = "all" ]; then
        show_group 1; show_group 2
        show_group 3; show_group 4
    elif [ $1 = "none" ]; then
        hide_group 1; hide_group 2
        hide_group 3; hide_group 4
    else
        test -e $ACTIVE/$1 \
            && hide_group $1 \
                || show_group $1
    fi
}

show_group_exclusive() {
    show_group $1
    for dir in $ACTIVE/*; do
        case "$(basename $dir)" in
            "$1") ;;
            * ) hide_group $(basename $dir) ;;
        esac
    done
}

check_groups_sanity() {
    test -d $ACTIVE || mkdir -p $ACTIVE
    for gid in $(seq 1 $GNUMBER ); do
        test -d $WROOT/$gid || mkdir -p $WROOT/$gid
    done

    for file in $(find $WROOT -type f); do
        wid=$(basename $file)
        wattr $wid || rm -f $file
    done
}

paint_groups() {
    for dir in $WROOT/?; do
        for file in $dir/*; do
            if [[ $(basename $file) != "*" ]]; then
                window=$(basename $file)
                brdrcolr=""
                color_of_group $(basename $dir) brdrcolr
                WINDOWS[window]="${WINDOWS[$window]} $brdrcolr"
            fi
        done
    done
    for win in "${!WINDOWS[@]}"; do
        printf -v hexid "%x" "$win"
        chwb -c "${WINDOWS[$win]}" -s 4 "0x$hexid"
    done
}

print_bar() {
    OUT="%{r}"
    for dir in $WROOT/*; do
        if [[ $(basename $dir) != "ACTIVE" ]]; then
            clr=""
            color_of_group $(basename $dir) clr
            OUT="$OUT%{F#$clr}"
            if [ $(basename $dir) = $LAST_ACTIVE ]; then
                color_of_group $dir lineclr
                OUT="$OUT%{+o}%{U#$clr}■%{-o} "
            else
                test -d "$ACTIVE/$(basename $dir)" \
                    && OUT="$OUT■ " \
                        || OUT="$OUT□ "
            fi
        fi
    done
    echo "$OUT "
}

check_groups_sanity
last_active

while getopts ":a:l:wd:ghm:t:T:u:pb" opt; do
    case $opt in
        a) add_to_group `pfw` $OPTARG ;;
        d) remove_from_group `pfw` $OPTARG ;;
        l) toggle_window_membership `pfw` $OPTARG ;;
        g) find_group `pfw` ;;
        m) show_group $OPTARG ;;
        p) paint_groups ;;
        t) togg_group $OPTARG ;;
        T) show_group_exclusive $OPTARG ;;
        u) hide_group $OPTARG ;;
        b) print_bar $OPTARG ;;
        *) usage && exit 0;;
    esac
done

# in case no argument is given, display the whole tree
test $# -eq 0 && tree --noreport $WROOT
