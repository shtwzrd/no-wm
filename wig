#!/bin/sh
#
# Copyright (c) 2015 Greduan <me@greduan.com>, licensed under the WTFPL
# Adds group-like capabilities, sorta like those you find in CWM and such WMs

. wmutils.conf

usage() {
    cat << EOF
usage: $(basename $0) [-hCU] [-c wid] [-s wid group] [-tmMu group]
       -h shows this help
       -c cleans WID from group files (and makes it visible)
       -C runs cleanup routine
       -s sets WID's group
       -S toggle sticky-mode (new windows spawn into last activated group)
       -t toggle group visibility state
       -T toggle group to be the only visible group
       -m maps (shows) group
       -M maps group and unmaps all other groups
       -u unmaps (hides) group
       -U unmaps all the groups
EOF
}

# in case no argument is given, display the whole tree
test $# -eq 0 && tree --noreport $GROUPSDIR && exit 0

# define our functions

# clean WID ($1) from group files
clean_wid() {
    sed -i '' -e "/$1/d" $GROUPSDIR/group.*
}

# cleans group ($1) from (in)active files
clean_status() {
    sed -i '' -e "/$1/d" $GROUPSDIR/active
    sed -i '' -e "/$1/d" $GROUPSDIR/inactive
}

# shows all the windows in group ($1)
map_group() {
    # safety
    if ! grep -q $1 < $GROUPSDIR/all; then
        echo "Group doesn't exist"
        exit 1
    fi

    # clean statuses
    clean_status $1
    # add to active
    echo $1 >> $GROUPSDIR/active

    # loop through group and map windows
    while read line; do
        mapw -m $line
    done < $GROUPSDIR/group."$1"

    echo "$1" > $GROUPSDIR/last
}

# hides all the windows in group ($1)
unmap_group() {
    # safety
    if ! grep -q $1 < $GROUPSDIR/all; then
        echo "Group doesn't exist"
        exit 1
    fi

    # clean statuses
    clean_status $1
    # add to inactive
    echo $1 >> $GROUPSDIR/inactive

    # loop through group and unmap windows
    while read line; do
        mapw -u $line
    done < $GROUPSDIR/group.$1
}

# assigns WID ($1) to the group ($2), or the last active if not specified
set_group() {
    g="$2"
    if [ -z "$2" ]; then
        if [ -z "$(head -n 1 $GROUPSDIR/sticky)" ]; then
            exit 0
        else
            g="$(head -n 1 $GROUPSDIR/last)"
        fi
    fi

    # make sure we've no duplicates
    clean_wid $1
    clean_status $g

    # create if group doesn't exist
    touch $GROUPSDIR/group.$g

    # insert WID into new group if not already there
    grep -q $1 < $GROUPSDIR/group.$g || \
        echo $1 >> $GROUPSDIR/group.$g

    # if we can't find the group add it to groups and make it active
    grep -q $g < $GROUPSDIR/all || \
        echo $g >> $GROUPSDIR/all && \
        echo $g >> $GROUPSDIR/active

    # map WID if group is active
    grep -q $g < $GROUPSDIR/active && \
    mapw -m $1

    # unmap WID if group is inactive
    grep -q $g < $GROUPSDIR/inactive && \
    mapw -u $1
}

# toggles visibility state of all the windows in group ($1)
toggle_group() {
    # safety
    if ! grep -q $1 < $GROUPSDIR/all; then
        echo "Group doesn't exist"
        return
    fi

    # search through active groups first
    grep -q $1 < $GROUPSDIR/active && \
    unmap_group $1 && \
    return

    # search through inactive groups next
    grep -q $1 < $GROUPSDIR/inactive && \
    map_group $1 && \
    return
}

# switch between 'sticky' (put window into last group by default) and not
toggle_sticky() {
    if [ -z "$(head -n 1 $GROUPSDIR/sticky)" ]; then
        echo "yes" > $GROUPSDIR/sticky
    else
        cat /dev/null > $GROUPSDIR/sticky
    fi
}

# removes all the unexistent WIDs from groups
# removes all group files that don't exist
# removes from 'all' file all groups that don't exist
cleanup_everything() {
    # clean WIDs that don't exist
    # using `cat` instead of `<` because error suppression
    cat $GROUPSDIR/group.* 2>/dev/null | while read wid; do
        wattr $wid || \
        clean_wid $wid
    done

    # clean group files that are empty
    for file in $GROUPSDIR/group.*; do
        # is the group empty?
        if [ ! -s $file ]; then
            rm -f $file
        fi
    done

    # remove groups that don't exist from 'all'
    while read line; do
        if [ ! -f $GROUPSDIR/group.$line ]; then
            sed -i '' -e "/$line/d" $GROUPSDIR/all
            clean_status $line
        fi
    done < $GROUPSDIR/all
}

# actual run logic (including arguments and such)

# check $GROUPSDIR exists
test -d $GROUPSDIR || mkdir -p $GROUPSDIR

# touch all the files
test -f $GROUPSDIR/active || :> $GROUPSDIR/active
test -f $GROUPSDIR/inactive || :> $GROUPSDIR/inactive
test -f $GROUPSDIR/all || :> $GROUPSDIR/all
test -f $GROUPSDIR/sticky || :> $GROUPSDIR/sticky
test -f $GROUPSDIR/last || echo '1' > $GROUPSDIR/last

cleanup_everything

# getopts yo
while getopts "hc:CSs:t:T:m:M:u:U" opt; do
    case $opt in
        h)
            usage && exit 0
            ;;
        c)
            clean_wid $OPTARG
            mapw -m $OPTARG
            break
            ;;
        C)
            cleanup_everything
            break
            ;;
        s)
            set_group $OPTARG $(eval echo "\$$OPTIND")
            break
            ;;
        S)
            toggle_sticky $OPTARG
            break
            ;;
        t)
            toggle_group $OPTARG
            break
            ;;
        T)
            for file in $GROUPSDIR/group.*; do
                group=${file##*.}
                if [ $group -ne $OPTARG ]; then
                    unmap_group $group
                fi
            done
            map_group $OPTARG
            break
            ;;
        m)
            map_group $OPTARG
            break
            ;;
        M)
            for file in $GROUPSDIR/group.*; do
                group=${file##*.}
                unmap_group $group
            done
            map_group $OPTARG
            break
            ;;
        u)
            unmap_group $OPTARG
            break
            ;;
        U)
            for file in $GROUPSDIR/group.*; do
                group=${file##*.}
                unmap_group $group
            done
            break
            ;;
    esac
done

